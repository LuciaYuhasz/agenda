extends ../layout.pug
block contenido
 

  .container
    meta(charset="UTF-8")
    button.btn.btn-secondary#btn-volver(type="button" onclick="history.back()") ← Volver atrás
    h1.text-center Nuevo turno
    script.
      // Función para buscar pacientes por nombre, apellido o DNI
      function buscarpaciente() {
          const input = document.getElementById('paciente_autocomplete').value;
          const listaPacientes = document.getElementById('lista_pacientes');

          if (input.length >= 3) {
              // Realizar la búsqueda mediante fetch
              fetch(`/buscarpaciente?query=${input}`)
                  .then(response => {
                      if (!response.ok) {
                          throw new Error('Error en la red: ' + response.status);
                      }
                      return response.json();
                  })
                  .then(data => {
                      console.log('Datos de pacientes:', data); // Log de datos
                      listaPacientes.innerHTML = ''; // Limpiar resultados anteriores
                      listaPacientes.style.display = 'block';
                      // Mostrar resultados encontrados como lista de pacientes
                      if (Array.isArray(data)) {
                          data.forEach(paciente => {
                              const item = document.createElement('li');
                              item.textContent = `${paciente.nombre} ${paciente.apellido} (${paciente.dni})`;
                              item.onclick = () => seleccionarPaciente(paciente);
                              listaPacientes.appendChild(item);
                          });
                      } else {
                          listaPacientes.style.display = 'none';
                      }
                  })
                  .catch(error => console.error('Error al buscar paciente:', error));
          } else {
              listaPacientes.style.display = 'none';
          }
      }
      // Función para seleccionar un paciente de la lista y completar datos
      function seleccionarPaciente(paciente) {
          console.log('Paciente seleccionado:', paciente); // Log de paciente seleccionado
          document.getElementById('paciente_autocomplete').value = `${paciente.nombre} ${paciente.apellido} (${paciente.dni})`;
          document.getElementById('id_paciente').value = paciente.id_paciente; // Guardar ID en campo oculto
          document.getElementById('lista_pacientes').style.display = 'none'; // Ocultar lista

          // Rellenar los campos con información del paciente
          document.getElementById('nombre').value = paciente.nombre;
          document.getElementById('apellido').value = paciente.apellido;
          document.getElementById('dni').value = paciente.dni;
          document.getElementById('obra_social').value = paciente.id_obra_social;
          document.getElementById('telefono').value = paciente.telefono;
          document.getElementById('email').value = paciente.email;
          //verificarListaEsperaDisponible();

      }
     // Función para habilitar campos de nuevo paciente
      function habilitarCamposNuevoPaciente() {
          document.getElementById('nombre').readOnly = false;
          document.getElementById('apellido').readOnly = false;
          document.getElementById('dni').readOnly = false;
          document.getElementById('obra_social').readOnly = false;
          document.getElementById('telefono').readOnly = false;
          document.getElementById('email').readOnly = false;
          document.getElementById('id_paciente').value = '';
          document.getElementById('paciente_autocomplete').value = '';
          document.getElementById('lista_pacientes').style.display = 'none';
      }

      // Función para crear un nuevo paciente mediante POST
      function crearNuevoPaciente() {
          const paciente = {
              nombre: document.getElementById('nombre').value,
              apellido: document.getElementById('apellido').value,
              dni: document.getElementById('dni').value,
              id_obra_social: document.getElementById('obra_social').value,
              telefono: document.getElementById('telefono').value,
              email: document.getElementById('email').value
          };
          // Validar campos obligatorios antes de enviar la solicitud
          if (!paciente.nombre || !paciente.apellido || !paciente.dni) {
              alert('Por favor, complete nombre, apellido y DNI');
              return;
          }
          // Enviar datos del paciente mediante fetch POST
          fetch('/pacientes', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                   'Accept': 'application/json' 
              },
              body: JSON.stringify(paciente)
          })
          .then(res => {
              console.log('Respuesta recibida:', res.status, res.statusText); // 👈 Ver el estado de la respuesta
              if (!res.ok) throw new Error("No se pudo registrar el paciente");
              return res.json();
          })
          .then(data => {
              console.log('JSON recibido del backend:', data); // 👈 Ver el contenido devuelto
              console.log('Paciente registrado con ID:', data.id_paciente || data.id); // 👈 Confirmar ID
              document.getElementById('id_paciente').value = data.id_paciente || data.id;
              alert("Paciente registrado correctamente");
          })
          .catch(err => {
              console.error('Error atrapado en el catch:', err); // 👈 Mostrar error completo

              alert("Error al registrar paciente");
          });
      } 
      // Función para buscar especialidades médicas por nombre
      function buscarEspecialidad() {
          const input = document.getElementById('especialidad_autocomplete').value;
          const listaEspecialidades = document.getElementById('lista_especialidades');

          if (input.length >= 2) {
              // Realizar búsqueda de especialidades mediante fetch
              fetch(`/buscarespecialidad?query=${input}`)
                  .then(response => response.json())
                  .then(data => {
                      console.log('Datos de especialidades:', data); // Log de datos
                      listaEspecialidades.innerHTML = ''; // Limpiar resultados anteriores
                      listaEspecialidades.style.display = 'block';
                      // Mostrar resultados encontrados como lista de especialidades
                      data.forEach(especialidad => {
                          const item = document.createElement('li');
                          item.textContent = especialidad.nombre;
                          item.onclick = () => seleccionarEspecialidad(especialidad);
                          listaEspecialidades.appendChild(item);
                      });
                  })
                  .catch(error => console.error('Error al buscar especialidad:', error));
          } else {
              listaEspecialidades.style.display = 'none';
          }
      }
      // Función para seleccionar una especialidad médica y cargar profesionales
      function seleccionarEspecialidad(especialidad) {
          console.log('Especialidad seleccionada:', especialidad); // Log de especialidad seleccionada
          document.getElementById('especialidad_autocomplete').value = especialidad.nombre;
          document.getElementById('id_especialidad').value = especialidad.id_especialidad; // Guardar ID en campo oculto
          document.getElementById('lista_especialidades').style.display = 'none'; // Ocultar lista
          obtenerProfesionales(); // Cargar profesionales basados en la especialidad seleccionada
          
      }
      // Función para obtener la lista de profesionales según la especialidad seleccionada
      function obtenerProfesionales() {
          const idEspecialidad = document.getElementById('id_especialidad').value;
          const profesionalSelect = document.getElementById('profesional');

          if (idEspecialidad) {
              // Obtener lista de profesionales mediante fetch
              fetch(`/api/profesionales/${idEspecialidad}`)
                  .then(response => response.json())
                  .then(data => {
                      console.log('Datos de profesionales:', data); // Log de datos
                      profesionalSelect.innerHTML = ''; // Limpiar opciones previas
                      // Opción predeterminada
                      const defaultOption = document.createElement('option');
                      defaultOption.value = '';
                      defaultOption.textContent = 'Seleccione un profesional';
                      profesionalSelect.appendChild(defaultOption);
                      // Agregar opciones de profesionales según los datos recibidos
                      data.forEach(profesional => {
                          const option = document.createElement('option');
                          option.value = profesional.id_profesional;
                          option.textContent = `${profesional.nombre} (${profesional.activo ? 'Activo' : 'Inactivo'})`;
                          profesionalSelect.appendChild(option);
                      });
                  })
                  .catch(error => console.error('Error al obtener profesionales:', error));
          } else {
              profesionalSelect.innerHTML = '';
          }   
      }
      // Función para obtener datos detallados de un profesional seleccionado
      function obtenerDatosProfesional() {
          semanasConHorarios.clear();

          //profesionalTieneHorariosTotales = false; // 🧼 Reset del estado global
          const idProfesional = document.getElementById('profesional').value;
          const idEspecialidad = document.getElementById('id_especialidad').value;

          if (idProfesional && idEspecialidad) {
              // Obtener datos del profesional mediante fetch              
              fetch(`/profesional/${idProfesional}/especialidad/${idEspecialidad}`)
                  .then(response => {
                      if (!response.ok) {
                          throw new Error('Error en la respuesta de la red');
                      }
                      return response.json();
                  })
                  .then(data => {
                      console.log('Datos del profesional:', data); // Log de datos del profesional
                      
                      obtenerHorarios();
                     

                     
                  })
                  .catch(error => console.error('Error al obtener datos del profesional:', error));
          }
      }
      // Función para agregar un paciente a la lista de espera
      function agregarListaEspera() {
        const idPaciente = document.getElementById('id_paciente').value;
        const idProfesional = document.getElementById('profesional').value;
        const idEspecialidad = document.getElementById('id_especialidad').value;

        if (!idPaciente || !idProfesional || !idEspecialidad) {
            alert('Faltan datos para agregar a la lista de espera.');
            return;
        }

        fetch('/api/lista-espera', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                id_paciente: idPaciente,
                id_profesional: idProfesional,
                id_especialidad: idEspecialidad
            })
        })
        .then(response => {
          if (!response.ok) {
            return response.json().then(err => {
              console.error('Error 400 del servidor:', err);
              alert('Error: ' + err.error);
              throw new Error(err.error);
            });
          }
          return response.json();
        })
        .then(data => {
          alert(data.mensaje || 'Agregado a la lista de espera');

          window.location.href = '/lista-espera'; // Redirección
        })
        .catch(error => console.error('Catch general:', error));
      }
      
      // Función que se ejecuta una vez cargado el DOM
      document.addEventListener('DOMContentLoaded', function() {
          const botonListaEspera = document.querySelector('#mensajeNoHorarios button');
          if (botonListaEspera) {
              botonListaEspera.disabled = true;
          }

          // Mensaje de alerta al guardar turno
          const formulario = document.querySelector('form');
          if (formulario) {
            formulario.addEventListener('submit', function(event) {
              alert("Turno guardado exitosamente!");
            });
          }
        });

      let inicioSemana = new Date();
      let finSemana = new Date();
      inicioSemana.setDate(inicioSemana.getDate() - inicioSemana.getDay() + 1); // Lunes
      finSemana.setDate(inicioSemana.getDate() + 6); // Domingo

      function cambiarSemana(dias) {
        inicioSemana.setDate(inicioSemana.getDate() + dias);
        finSemana.setDate(inicioSemana.getDate() + 6);
        obtenerHorarios();
      }

      function cambiarMes(meses) {
        inicioSemana.setMonth(inicioSemana.getMonth() + meses);
        inicioSemana.setDate(inicioSemana.getDate() - inicioSemana.getDay() + 1);
        finSemana = new Date(inicioSemana);
        finSemana.setDate(inicioSemana.getDate() + 6);
        obtenerHorarios();
      }
      function formatearFecha(fechaISO) {
        const [anio, mes, dia] = fechaISO.split('-');
        return `${dia}/${mes}/${anio}`;
      }

      // Función para obtener los horarios disponibles según profesional y especialidad

      let semanasConHorarios = new Set(); // Guardamos semanas con al menos un turno

      function obtenerHorarios() {
        const idProfesional = document.getElementById('profesional').value;
        const idEspecialidad = document.getElementById('id_especialidad').value;
        const fechaTableContainer = document.getElementById('fechaTable');
        const mensajeNoHorarios = document.getElementById('mensajeNoHorarios');
        const botonListaEspera = document.getElementById('btnListaEspera');
        const navegacionFechas = document.getElementById('navegacionFechas');
        const fechaTable = fechaTableContainer.querySelector('tbody');

        if (fechaTable) fechaTable.innerHTML = '';

        if (idProfesional && idEspecialidad) {
          const fechaInicioString = inicioSemana.toISOString().split('T')[0];

          fetch(`/obtenerHorarios/${idProfesional}/${idEspecialidad}/${fechaInicioString}`)
            .then(response => response.json())
            .then(horarios => {
              console.log('Horarios obtenidos:', horarios);

              const hayHorarios = Array.isArray(horarios)
                ? horarios.length > 0
                : Object.keys(horarios).length > 0;

              if (hayHorarios) {
                semanasConHorarios.add(fechaInicioString);

                if (mensajeNoHorarios) mensajeNoHorarios.style.display = 'none';
                if (botonListaEspera) botonListaEspera.disabled = true;
                if (navegacionFechas) navegacionFechas.style.display = 'flex';
              } else {
                const huboHorariosAntes = semanasConHorarios.size > 0;

                if (huboHorariosAntes) {
                  console.log("🔄 Semana vacía, pero ya hubo turnos antes.");
                  if (mensajeNoHorarios) mensajeNoHorarios.style.display = 'none';
                  if (botonListaEspera) botonListaEspera.disabled = true;
                  if (navegacionFechas) navegacionFechas.style.display = 'flex';
                } else {
                  console.log("⚠️ Sin turnos en ninguna semana aún.");
                  if (mensajeNoHorarios) mensajeNoHorarios.style.display = 'block';
                  if (botonListaEspera) botonListaEspera.disabled = false;
                  if (navegacionFechas) navegacionFechas.style.display = 'flex';
                  if (botonListaEspera) {
                    botonListaEspera.disabled = semanasConHorarios.size > 0;
                  }
                }

                return;
              }

              const renderFila = (fecha, items) => {
                const tr = document.createElement('tr');
                const tdFecha = document.createElement('td');
                tdFecha.textContent = formatearFecha(fecha);
                tr.appendChild(tdFecha);

                const tdHorarios = document.createElement('td');
                tdHorarios.classList.add('horarios-columna');
                tdHorarios.style.display = 'flex';
                tdHorarios.style.flexWrap = 'wrap';
                tdHorarios.style.gap = '10px';

                items.forEach(horario => {
                  const horarioDiv = document.createElement('div');
                  horarioDiv.classList.add('card-horario');

                  const btnHorario = document.createElement('button');
                  btnHorario.classList.add('btn-horario');
                  btnHorario.textContent = `${horario.hora_inicio} - ${horario.hora_fin}`;

                  btnHorario.onclick = () => {
                    document.getElementById('horario').value = horario.hora_inicio;
                    document.getElementById('fecha').value = fecha;
                    document.getElementById('id_horario').value = horario.id_horarios;
                    console.log('Fecha seleccionada:', fecha);
                    console.log('Horario asignado:', horario.hora_inicio);
                  };

                  horarioDiv.appendChild(btnHorario);
                  tdHorarios.appendChild(horarioDiv);
                });

                tr.appendChild(tdHorarios);
                fechaTable.appendChild(tr);
              };

              if (!Array.isArray(horarios)) {
                Object.keys(horarios).forEach(fecha => {
                  renderFila(fecha, horarios[fecha]);
                });
              } else {
                const agrupado = {};
                /*horarios.forEach(h => {
                  const fecha = new Date(h.fecha).toISOString().split('T')[0];
                  if (!agrupado[fecha]) agrupado[fecha] = [];
                  agrupado[fecha].push(h);
                });*/
                horarios.forEach(h => {
                  const fecha = h.fecha; // ya es 'YYYY-MM-DD', ¡no hace falta convertir!
                  if (!agrupado[fecha]) agrupado[fecha] = [];
                  agrupado[fecha].push(h);
                });


                Object.keys(agrupado).forEach(fecha => {
                  renderFila(fecha, agrupado[fecha]);
                });
              }
            })
            .catch(error => console.error('Error al obtener horarios:', error));
        }
      }

      function mostrarBotonAgenda() { 
        console.log("🔵 Entró a mostrarBotonAgenda()");
        
        const idProf = document.getElementById('profesional')?.value;
        const idEsp = document.getElementById('id_especialidad')?.value;

        if (idProf && idEsp) {
          fetch(`/api/agenda/${idProf}/${idEsp}?semana=actual`)
            .then(response => response.json())
            .then(data => {
              renderizarAgendaEnModal(data);

              const modalElement = document.getElementById('agendaModal');
              console.log("🟣 Modal encontrado en el DOM:", modalElement);

              if (!modalElement) {
                console.error("❌ No se encontró el modal en el DOM");
                return;
              }

              // ✅ Mostrar el modal solo con JavaScript puro
              modalElement.classList.remove('hidden');
              console.log("✅ Modal mostrado sin Bootstrap");
            })
            .catch(error => console.error('Error al cargar la agenda:', error));
        }
      }

        function renderizarAgendaEnModal(agenda) {
          console.log("🟡 Entró a renderizarAgendaEnModal()");
          console.log("✅ Agenda recibida desde backend:", agenda);

          if (!Array.isArray(agenda)) {
            console.error("❌ Error: la agenda no es un array. Respuesta recibida:", agenda);
            document.getElementById("agendaModalBody").innerHTML = `
              <div class="alert alert-danger">
                No se pudo cargar la agenda. Verificá el servidor.
              </div>
            `;
            return;
          }
            
          if (agenda.length === 0) {
            document.getElementById("agendaModalBody").innerHTML = `
              <div class="alert alert-info">
                No hay turnos disponibles en este rango.
              </div>
            `;
            return;
          }

          let html = `
            <table class="table table-bordered">
              <thead>
                <tr>
                  <th>Fecha</th>
                  <th>Hora</th>
                  <th>Estado</th>
                  <th>Acción</th>
                </tr>
              </thead>
              <tbody>
          `;

          let fechaActual = '';
          agenda.forEach(item => {
            const mostrarFecha = item.fecha !== fechaActual;
            if (mostrarFecha) fechaActual = item.fecha;

            const claseFila =
              item.tipo === 'ocupado' ? 'table-danger' :
              item.tipo === 'bloqueado' ? 'table-warning' :
              'table-success';

            const fechaFormateada = new Date(item.fecha).toISOString().slice(0, 10);
            const horaFormateada = item.hora.includes('-')
              ? item.hora.split(' - ')[0]
              : item.hora.slice(0, 5);

            html += `
              <tr class="${claseFila}">
                <td>${mostrarFecha ? fechaFormateada : ''}</td>
                <td>${horaFormateada}</td>
                <td>${item.estado}</td>
                <td>
                  <button
                    type="button"
                    class="btn btn-sm btn-warning"
                    onclick="seleccionarSobreturno(this)"
                    data-hora="${item.hora}"
                    data-fecha="${item.fecha}"
                    data-id-turno="${item.id_turno}"
                  >
                    ➕ Sobreturno
                  </button>
                </td>
              </tr>
            `;
          }); // ✅ cierre correcto del forEach

          html += `
              </tbody>
            </table>
          `;

          document.getElementById("agendaModalBody").innerHTML = html;
        }


      document.addEventListener("DOMContentLoaded", () => {
        const botonMostrarAgenda = document.getElementById("btnMostrarAgenda");

        if (botonMostrarAgenda) {
          botonMostrarAgenda.addEventListener("click", () => {
            console.log("🟢 Botón 'Mostrar Agenda' fue clickeado");
            mostrarBotonAgenda();
          });
        }
      });



      function seleccionarSobreturno(boton) {
        const hora = boton.dataset.hora;
        const fechaISO = boton.dataset.fecha; // 🟠 viene como '2025-07-18T03:00:00.000Z'
        const idTurnoBase = boton.dataset.idTurno;

        // ✅ Convertir a formato 'YYYY-MM-DD'
        const fechaFormateada = new Date(fechaISO).toISOString().slice(0, 10);

        console.log("🟠 Sobreturno seleccionado:", { hora, fechaOriginal: fechaISO, fechaFormateada, idTurnoBase });

        //document.getElementById('horario').value = hora;
        const horaInicio = hora.split(' - ')[0] + ':00';
        document.getElementById('horario').value = horaInicio;

        document.getElementById('fecha').value = fechaFormateada; // 👈 CORREGIDO

        console.log("📤 Fecha insertada en input:", document.getElementById('fecha').value);

        let campoSobreturno = document.querySelector('input[name="sobreturno"]');
        let campoBase = document.querySelector('input[name="id_turno_base"]');

        if (!campoSobreturno) {
          campoSobreturno = document.createElement('input');
          campoSobreturno.type = 'hidden';
          campoSobreturno.name = 'sobreturno';
          campoSobreturno.value = '1';
          document.querySelector('form').appendChild(campoSobreturno);
        } else {
          campoSobreturno.value = '1';
        }

        if (!campoBase) {
          campoBase = document.createElement('input');
          campoBase.type = 'hidden';
          campoBase.name = 'id_turno_base';
          campoBase.value = idTurnoBase;
          document.querySelector('form').appendChild(campoBase);
        } else {
          campoBase.value = idTurnoBase;
        }
      }


    // 🟦 Apertura del formulario. Envia datos por método POST a la ruta "../crear"
    //form(action="../crear" method="POST")
    form(method="POST" action="/crear")


      // 🔹 SECCIÓN: Información del Paciente
      .section-paciente
        h3 Información del Paciente
        .row
          .col-md-6
            // 🟢 Campo de autocompletado de paciente
            label(for="paciente_autocomplete") Paciente:
            input.form-control(type="text" name="paciente_autocomplete" id="paciente_autocomplete" placeholder="Nombre, Apellido o DNI" oninput="buscarpaciente()" required)
            // 🟢 Campo oculto donde se guarda el ID del paciente seleccionado
            input(type="hidden" name="id_paciente" id="id_paciente")
            // 🟢 Lista desplegable con resultados del autocompletado
            ul#lista_pacientes(style="display: none")
          .col-md-6
            // 🟢 Campo de nombre (rellenado automáticamente o editable si es nuevo paciente)
            label(for="nombre") Nombre:
            input.form-control(type="text" id="nombre" readonly)
        .row
          .col-md-6
            label(for="apellido") Apellido:
            input.form-control(type="text" id="apellido" readonly)
          .col-md-6
            label(for="dni") DNI:
            input.form-control(type="text" id="dni" readonly)
        .row
          .col-md-6
            label(for="obra_social") Obra Social:
            select.form-control(name="obra_social" id="obra_social" required)
              option(value="" disabled selected) -- Seleccione una obra social --
              each obra in obrasSociales
                option(value=obra.id_obra_social)= obra.nombre
          .col-md-6
            label(for="telefono") Teléfono:
            input.form-control(type="text" id="telefono" readonly)
        .row
          .col-md-12
            label(for="email") Email:
            input.form-control(type="text" id="email" readonly)
        .row
          .col-md-6
            // 🟡 Botón para habilitar la creacion  manual de los campos del paciente
            button.btn.btn-secondary(type="button" onclick="habilitarCamposNuevoPaciente()") Nuevo Paciente
          .col-md-6
            // 🟡 Botón para guardar un nuevo paciente ingresado
            button.btn.btn-success(type="button" onclick="crearNuevoPaciente()") Guardar Paciente
        hr

      // 🔹 SECCIÓN: Información del Profesional
      .section-profesional
        h3 Especialidad Medica:
        .row
          .col-md-6
            // 🟣 Campo de autocompletado para buscar especialidades
            label(for="especialidad_autocomplete")
            input.form-control(type="text" name="especialidad_autocomplete" id="especialidad_autocomplete" placeholder="Buscar especialidad" oninput="buscarEspecialidad()" required)
            // 🟣 Campo oculto con el ID de la especialidad seleccionada
            input(type="hidden" name="id_especialidad" id="id_especialidad")
            // 🟣 Lista de resultados para autocompletar especialidad
            ul#lista_especialidades(style="display: none")
        br
        h3 Información del Profesional
        
        .col-md-6
          // 🟣 Selección del profesional disponible para la especialidad
          label(for="profesional") Seleccione un profesional
          select.form-control(name="id_profesional" id="profesional" onchange="obtenerDatosProfesional()" required)
            option(value="") Seleccione un profesional

        hr

      // 🔹 SECCIÓN: Información del Turno
      .section-turno
        h3 Información del Turno

      //button.btn.btn-info(type="button", id="btnMostrarAgenda") Para sobreturno: Mostrar Agenda Semanal 
    
      .row.mb-2#navegacionFechas
        .col-md-6.text-start
          .btn-group
            button.btn.btn-light(type="button" onclick="cambiarSemana(-7)") ← Semana Anterior
            button.btn.btn-light(type="button" onclick="cambiarSemana(7)") Semana Siguiente →
        .col-md-6.text-end
          .btn-group
            button.btn.btn-outline-secondary(type="button" onclick="cambiarMes(-1)") ← Mes Anterior
            button.btn.btn-outline-secondary(type="button" onclick="cambiarMes(1)") Mes Siguiente →



        // 📅 Tabla con horarios
      .row
        .col-md-12
          table.table.table-bordered#fechaTable
            thead
              tr
                th(style="width: 20%") Fecha
                th Horarios
                //input(type="hidden" name="fecha" id="fecha")
            tbody

        // ❗ Bloque centrado de “No hay horarios”
      #mensajeNoHorarios.text-center(style="display: none; margin-top: 20px")
        p.text-danger No hay horarios disponibles esta semana.
        button#btnListaEspera.btn.btn-outline-warning.btn-sm.mt-2(type="button" onclick="agregarListaEspera()" disabled) Agregar a Lista de Espera

      .row
        .col-md-6           
          select.form-control(name="estado" id="estado")
            each estado in estadoOptions
              option(value=estado selected=(estado === 'Confirmado') ? true : false)= estado

        .col-md-6
          // 📝 Campo donde se describe el motivo del turno
          label(for="motivo_consulta") Motivo de Consulta:
          input.form-control(type="text" name="motivo_consulta" id="motivo_consulta" required)

      .row
        .col-md-12.text-center
          br
          // 📌 Campos ocultos que almacenan datos del horario seleccionado
          input(type="hidden" name="horario" id="horario")
          input(type="hidden" name="id_horario" id="id_horario")
          input(type="hidden" name="fecha" id="fecha")
 

      .row
        .col-md-12
          br
          // 🔘SOBRETURNO
          button.btn.btn-primary(type="submit") Guardar Turno
          button.btn.btn-info(type="button", id="btnMostrarAgenda") Para sobreturno: Mostrar Agenda Semanal 


 

  //- Modal personalizado
  #agendaModal.modal-custom.hidden
    .modal-content-custom
      .modal-header-custom
        
        //button#btnCerrarModal.close-btn X
      .modal-body#agendaModalBody
        // Aquí se cargará la agenda
      .modal-footer
        //button#btnCerrarFooter.footer-close-btn Cerrar


 









